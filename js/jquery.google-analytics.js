// Generated by CoffeeScript 1.6.1

(function($) {
  var ga;
  window._gaq = window._gaq || [];
  window._gat = window._gat || [];
  ga = {};
  ga.debug = false;
  ga.debugWindow = false;
  ga._debugWindow = null;
  ga.log = function() {
    var args, p;
    if (ga.debug !== true || ga.debugWindow !== true) {
      return;
    }
    arguments.join = Array.prototype.join;
    args = arguments.length > 1 ? arguments.join(' ') : arguments[0];
    if (ga.debugWindow) {
      if (ga._debugWindow === null) {
        ga._debugWindow = window.open('', '__jQueryGoogleAnalyticsConsole', 'left=0,top=0,width=480,height=800,scrollbars=yes,status=no,resizable=yes;toolbar=no');
        ga._debugWindow.opener = self;
        ga._debugWindowDoc = ga._debugWindow.document;
        if (ga._debugWindow && ga._debugWindowDoc && ga._debugWindowDoc.body && ga._debugWindowDoc.body.id !== 'console') {
          ga._debugWindowDoc.open();
          ga._debugWindowDoc.write("<!DOCTYPE html>");
          ga._debugWindowDoc.write("<html><head><title>jquery.google-analytics.js console</title>\n");
          ga._debugWindowDoc.write("<style type=\"text/css\">pre{margin:0;padding:2px;border-bottom:1px solid #ccc;}pre:hover{background-color:Highlight;color:HighlightText;}</style><body style=\"margin:0;padding:0;\"></body>\n");
          ga._debugWindowDoc.write("</head><body style=\"margin:0;padding:0;\"></body>\n");
          ga._debugWindow.blur();
          ga._debugWindow.focus();
        }
      }
      if (ga._debugWindow) {
        p = ga._debugWindowDoc.createElement('pre');
        p.innerHTML = args.toString();
        ga._debugWindowDoc.body.appendChild(p);
      }
    }
    if (window.console && window.console.log) {
      window.console.log(args);
    }
  };
  ga.scriptLoaded = false;
  ga.scriptUrl = ('https:' === document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  ga.href = function(elm) {
    return elm.href;
  };
  ga.load = function() {
    var s, script;
    script = document.createElement('script');
    script.type = 'text/javascript';
    script.async = true;
    script.src = ga.scriptUrl;
    s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(script, s);
    ga.scriptLoaded = true;
    return this;
  };
  ga.push = function() {
    return _gaq.push.call(window, arguments);
  };
  ga.call = function(method, args, options) {
    var a, defaults, m, settings;
    defaults = {
      tracker: null
    };
    settings = $.extend({}, defaults, options);
    a = $.isArray(args) ? args : [args];
    $.each(a, function(i, v) {
      if (v === null || v === void 0) {
        a.splice(i, 1);
      }
    });
    m = $.isFunction(method) ? method.call(null) : method;
    (function(tracker) {
      var _args, _m;
      _m = m;
      if (tracker) {
        if ($.isArray(tracker)) {
          _args = arguments;
          $.each(tracker, function(i, v) {
            return _args.callee(v);
          });
          return;
        } else if (typeof tracker === 'string' && tracker !== '') {
          _m = tracker + '.' + m;
        }
      }
      a.unshift(_m);
      ga.log(a);
      ga.push(a);
      return a.shift();
    })(settings.tracker);
    if (!ga.scriptLoaded) {
      ga.load();
    }
    return this;
  };
  ga.setAccount = function(accountId, options) {
    return this.call('_setAccount', accountId, options);
  };
  ga.setDomainName = function(domainName, options) {
    return this.call('_setDomainName', domainName, options);
  };
  ga.setAllowLinker = function(bool, options) {
    return this.call('_setAllowLinker', bool, options);
  };
  ga.setCustomVar = function(index, name, value, scope, options) {
    return this.call('_setCustomVar', [index, name, value, scope], options);
  };
  ga.trackEvent = function(category, action, label, options) {
    return this.call('_trackEvent', [category, action, label], options);
  };
  ga.trackPageview = function(uri, options) {
    return this.call('_trackPageview', uri, options);
  };
  ga.autoTracking = function(options) {
    var defaults, settings;
    defaults = {
      trackProtocol: true,
      trackingProtocols: ['mailto:', 'tel:'],
      trackExternalLink: true,
      ignoreDomains: [],
      externalLinkEventCategory: 'ExternalLink',
      trackFileDownload: true,
      fileDownloadEventCategory: 'FileDownload',
      fileDownloadRegExp: /\.(doc|eps|svg|xls|ppt|pdf|zip|vsd|vxd|rar|exe|wma|mov|avi|wmv|mp3|mp4|jpg|zip|sit|exe|sea|gif)/i
    };
    settings = $.extend({}, defaults, options);
    $(document).ready(function() {
      $('a').each(function() {
        var $a, a, host, path;
        a = this;
        $a = $(this);
        host = a.hostname;
        path = a.pathname + a.search;
        if (settings.trackProtocol && $.inArray(a.protocol, settings.trackingProtocols) >= 0) {
          $a.click(function() {
            return ga.trackEvent(a.protocol.replace(':', ''), 'Click', $.ga.href(this), options);
          });
        } else if (settings.trackExternalLink && host !== location.hostname && $.inArray(host, settings.ignoreDomains) < 0) {
          $a.click(function() {
            return ga.trackEvent(settings.externalLinkEventCategory, 'Click', $.ga.href(this), options);
          });
        } else if (settings.trackFileDownload && path.match(settings.fileDownloadRegExp)) {
          $a.click(function() {
            return ga.trackEvent(settings.fileDownloadEventCategory, 'Click', $.ga.href(this), options);
          });
        }
      });
    });
  };
  return $(function() {
    var _ga;
    if ($.ga) {
      _ga = $.ga;
    }
    $.ga = $['google-analytics'] = ga;
    $.fn.trackEvent = function(category, action, label, options) {
      var method;
      method = options && options.event ? options.event : 'click';
      return this.each(function() {
        return $(this).on(method, function() {
          var _act, _cat, _lbl;
          _cat = $.isFunction(category) ? category.call(null, this) : category;
          _act = $.isFunction(action) ? action.call(null, this) : action;
          _lbl = $.isFunction(label) ? label.call(null, this) : label;
          return ga.trackEvent(_cat, _act, _lbl, options);
        });
      });
    };
    return $.fn.trackPageview = function(uri, options) {
      var method;
      method = options.event || 'click';
      return this.each(function() {
        return $(this).on(method, function() {
          var _uri;
          _uri = $.isFunction(uri) ? uri.call(null, this) : uri;
          return ga.trackPageview(_uri, options);
        });
      });
    };
  });
})(jQuery);
