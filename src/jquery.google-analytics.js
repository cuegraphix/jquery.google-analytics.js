// Generated by CoffeeScript 1.6.1
/**
 * jQuery Google Analytics v0.3.0 - jQuery plugin
 * Copyright (c) 2013 cue - x-perience
 * License: http://www.opensource.org/licenses/mit-license.php
*/

var _gaq;

_gaq = _gaq || [];

(function($) {
  var ga, __getArgumentsAndOptions, _ga;
  ga = {};
  ga.debug = false;
  ga.log = function() {
    var args;
    if (ga.debug !== true) {
      return;
    }
    arguments.join = Array.prototype.join;
    args = arguments.length > 1 ? arguments.join(' ') : arguments[0];
    if (window.console && window.console.log) {
      window.console.log(args);
    }
  };
  ga.info = function() {
    var args;
    if (ga.debug !== true) {
      return;
    }
    arguments.join = Array.prototype.join;
    args = arguments.length > 1 ? arguments.join(' ') : arguments[0];
    if (window.console && window.console.info) {
      window.console.info(args);
    }
  };
  ga._scriptLoad = false;
  ga.scriptUrl = ('https:' === document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  ga._loadTime = new Date().getTime();
  ga._pageLoadTime = null;
  ga.href = function(elm) {
    return $(elm).attr('href');
  };
  ga.url = function(withSearch) {
    return location.pathname + (withSearch ? location.search : '');
  };
  ga.location = function(withSearch) {
    return ga.url(withSearch);
  };
  ga.pageSec = function() {
    var d;
    d = new Date();
    return parseInt((d.getTime() - ga._loadTime) / 1000);
  };
  ga.isScriptLoaded = function() {
    return ga._scriptLoad || (window._gat(!void 0 && typeof window._gat === 'object'));
  };
  ga.load = function() {
    var s, script;
    if (ga.isScriptLoaded()) {
      return this;
    }
    ga._loadTime = new Date();
    script = document.createElement('script');
    script.type = 'text/javascript';
    script.async = true;
    script.src = ga.scriptUrl;
    s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(script, s);
    ga._scriptLoad = true;
    return this;
  };
  ga._push = function() {
    return _gaq.push.apply(_gaq, arguments);
  };
  /* gaq Methods
  */

  ga.push = function() {
    ga._push.apply(ga, arguments);
    return this;
  };
  ga.call = function(method, args, options) {
    var a, defaults, m, settings;
    defaults = {
      async: true,
      tracker: null,
      delay: 0
    };
    settings = $.extend({}, defaults, options);
    a = args != null ? ($.isArray(args) ? args : [args]) : [];
    $.each(a, function(i, v) {
      if (v === null || v === void 0) {
        a.splice(i, 1);
      }
    });
    m = $.isFunction(method) ? method.call(null) : method;
    (function(tracker) {
      var pageTracker, _a, _args, _m;
      _m = m;
      if (tracker) {
        if ($.isArray(tracker)) {
          _args = arguments;
          $.each(tracker, function(i, v) {
            _args.callee(v);
          });
          return;
        } else if (typeof tracker === 'string' && tracker !== '') {
          _m = tracker + '.' + m;
        }
      }
      _a = $.merge([_m], a);
      ga.info(_a);
      if (settings.async) {
        ga.push(_a);
      } else {
        try {
          pageTracker = window._gat._getTrackerByName(tracker);
          if ($.isFunction(pageTracker[method])) {
            pageTracker[method].apply(pageTracker, a);
          }
        } catch (_error) {}
      }
    })(settings.tracker);
    return this;
  };
  /* Methods
  */

  ga.setAccount = function(accountId, opt_options) {
    return this.call('_setAccount', accountId, opt_options);
  };
  ga.setDomainName = function(domainName, opt_options) {
    return this.call('_setDomainName', domainName, opt_options);
  };
  ga.setAllowLinker = function(bool, opt_options) {
    return this.call('_setAllowLinker', bool, opt_options);
  };
  ga.setCustomVar = function(index, name, value, opt_scope, opt_options) {
    return this.call('_setCustomVar', [index, name, value, opt_scope], opt_options);
  };
  ga.setSampleRate = function(rate, opt_options) {
    return this.call('_setSampleRate', rate, opt_options);
  };
  ga.setCookiePath = function(path, opt_options) {
    return this.call('_setCookiePath', path, opt_options);
  };
  ga.setSessionCookieTimeout = function(msec, opt_options) {
    return this.call('_setSessionCookieTimeout', msec, opt_options);
  };
  ga.setVisitorCookieTimeout = function(msec, opt_options) {
    return this.call('_setVisitorCookieTimeout', msec, opt_options);
  };
  ga.trackEvent = function(category, action, opt_label, opt_value, opt_noninteraction, opt_options) {
    var a;
    a = __getArgumentsAndOptions(2, arguments);
    return this.call('_trackEvent', a["arguments"], a.options);
  };
  ga.trackPageview = function(uri, options) {
    return this.call('_trackPageview', uri, options);
  };
  ga.trackSocial = function(network, socialAction, opt_target, opt_pagePath, opt_options) {
    var a;
    a = __getArgumentsAndOptions(2, arguments);
    return this.call('_trackEvent', a["arguments"], a.options);
  };
  ga.link = function(targetUrl, useHash, opt_options) {
    return this.call('_link', [targetUrl, useHash], opt_options);
  };
  ga.linkByPost = function(formObject, useHash, opt_options) {
    return this.call('_linkByPost', [formObject, useHash], opt_options);
  };
  /* Campain Methods
  */

  ga.setCampaignTrack = function(bool, opt_options) {
    return this.call('_setCampaignTrack', bool, opt_options);
  };
  ga.setAllowAnchor = function(bool, opt_options) {
    return this.call('_setAllowAnchor', bool, opt_options);
  };
  ga.setCampSourceKey = function(key, opt_options) {
    return this.call('_setCampSourceKey', key, opt_options);
  };
  ga.setCampMediumKey = function(key, opt_options) {
    return this.call('_setCampMediumKey', key, opt_options);
  };
  ga.setCampTermKey = function(key, opt_options) {
    return this.call('_setCampTermKey', key, opt_options);
  };
  ga.setCampContentKey = function(key, opt_options) {
    return this.call('_setCampContentKey', key, opt_options);
  };
  ga.setCampNameKey = function(key, opt_options) {
    return this.call('_setCampNameKey', key, opt_options);
  };
  ga.setCampNOKey = function(key, opt_options) {
    return this.call('_setCampNOKey', key, opt_options);
  };
  ga.setCampaignCookieTimeout = function(msec, opt_options) {
    return this.call('_setCampaignCookieTimeout', msec, opt_options);
  };
  /* Ecommerce Methods
  */

  ga.addItem = function(transactionId, sku, name, category, price, quantity, opt_option) {
    return this.call('_addItem', [transactionId, sku, name, category, price, quantity], opt_option);
  };
  ga.addTrans = function(transactionId, affiliation, total, tax, shipping, city, state, country, opt_option) {
    return this.call('_addTrans', [transactionId, affiliation, total, tax, shipping, city, state, country], opt_option);
  };
  ga.trackTrans = function() {
    return this.call('_trackTrans');
  };
  /*
   * Custom Method
  */

  ga.autoTracking = function(options) {
    var defaults, settings;
    defaults = {
      trackProtocol: true,
      trackingProtocols: ['mailto:', 'tel:'],
      trackExternalLink: true,
      ignoreDomains: [],
      externalLinkEventCategory: 'ExternalLink',
      trackDownload: true,
      downloadEventCategory: 'FileDownload',
      eventAction: 'Click',
      eventLabel: ga.href,
      downloadRegExp: /\.(pdf|zip|jpe?g|png|gif|mp\d?|mpe?g|flv|wmv|docx?|pptx?|xlsx?|exe)/i
    };
    settings = $.extend({}, defaults, options);
    $(function() {
      $('a').each(function() {
        var $a, a, host, path;
        a = this;
        $a = $(this);
        host = a.hostname;
        path = a.pathname + a.search;
        if (settings.trackProtocol && $.inArray(a.protocol, settings.trackingProtocols) >= 0) {
          $a.click(function() {
            return ga.trackEvent(a.protocol.replace(':', ''), settings.eventAction, settings.eventLabel(this, options));
          });
        } else if (settings.trackExternalLink && host !== location.hostname && $.inArray(host, settings.ignoreDomains) < 0) {
          $a.click(function() {
            return ga.trackEvent(settings.externalLinkEventCategory, settings.eventAction, settings.eventLabel(this, options));
          });
        } else if (settings.trackDownload && path.match(settings.downloadRegExp)) {
          $a.click(function() {
            return ga.trackEvent(settings.downloadEventCategory, settings.eventAction, settings.eventLabel(this, options));
          });
        }
      });
    });
    return this;
  };
  ga.trackScroll = function(options) {
    var defaults, settings, _scrollMax;
    defaults = {
      eventCategory: 'Reading',
      eventAction: 'Scroll',
      eventLabel: ga.url,
      scrollMinRatio: 40,
      scrollRenges: [40, 60, 80, 100]
    };
    settings = $.extend({}, defaults, options);
    _scrollMax = 0;
    $(window).bind('scroll', function() {
      var scrollTop;
      scrollTop = $(window).scrollTop();
      if (scrollTop > _scrollMax) {
        return _scrollMax = scrollTop;
      }
    });
    return $(window).bind('unload', function() {
      var docHeight, l, s, scrollRatio, v, windowHeight, _i, _len, _ref;
      windowHeight = $(window).height();
      docHeight = $(document).height();
      scrollRatio = parseInt((_scrollMax + windowHeight) / docHeight * 100);
      if (scrollRatio >= settings.scrollMinRatio) {
        l = 0;
        _ref = settings.scrollRenges;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          if (scrollRatio <= s) {
            v = l + ' - ' + s + '%';
            ga.trackEvent(settings.eventCategory, settings.eventAction, settings.eventLabel, v);
            return;
          }
          l = s;
        }
      }
    });
  };
  ga.trackDelay = function(sec, options) {
    var defaults, settings;
    defaults = {
      eventCategory: 'Reading',
      eventAction: 'Stay',
      eventLabel: ga.url,
      scrollMinRatio: 40,
      scrollRenges: [40, 60, 80, 100]
    };
    settings = $.extend({}, defaults, options);
    if (sec == null) {
      sec = 15000;
    }
    return setTimeout(function() {
      return ga.trackEvent(settings.eventCategory, settings.eventAction, settings.eventLabel, ga.pageSec());
    }, sec);
  };
  ga.cookie = {};
  ga.cookie.cache = {};
  ga.cookie.config = {
    __utma: '__utma',
    __utmb: '__utmb',
    __utmz: '__utmz'
  };
  ga.cookie.get = function(key) {
    var a, b, c, cookie, kv, l, m, name, o, val, _i, _j, _len, _len1;
    if (ga.cookie.cache[key]) {
      return ga.cookie.cache[key];
    }
    if (window.document.cookie) {
      cookie = window.document.cookie.split(';');
      for (_i = 0, _len = cookie.length; _i < _len; _i++) {
        c = cookie[_i];
        if (!c) {
          continue;
        }
        kv = c.split('=');
        if (!kv[1]) {
          continue;
        }
        name = decodeURIComponent(kv[0].replace(/(^\s+|\s+$)/g, ''));
        if (name === key) {
          if (name === ga.cookie.config.__utmz) {
            kv.shift();
            val = kv.join('=');
            a = val.split(".");
            if (a[4] && a[4].indexOf("|") >= 0) {
              l = a[4].split('|');
              o = {};
              for (_j = 0, _len1 = l.length; _j < _len1; _j++) {
                b = l[_j];
                m = b.split('=');
                o[m[0]] = m[1];
              }
              a[4] = o;
            }
          } else {
            a = kv[1].split(".");
          }
          ga.cookie.cache[key] = a;
          return a;
        }
      }
    }
    return null;
  };
  ga.cookie.refresh = function(key) {
    if (key) {
      delete ga.cookie.cache[key];
      return;
    }
    ga.cookie.cache = {};
  };
  ga.getIsVistor = function() {
    return ga.getFirstVisitTime() !== ga.getCurrentVisitTime();
  };
  ga.getVisitorId = function() {
    var c;
    c = ga.cookie.get(ga.cookie.config.__utma);
    if (c) {
      return c[1];
    } else {
      return null;
    }
  };
  ga.getFirstVisitTime = function() {
    var c;
    c = ga.cookie.get(ga.cookie.config.__utma);
    if (c) {
      return c[2];
    } else {
      return null;
    }
  };
  ga.getPreviousVisitTime = function() {
    var c;
    c = ga.cookie.get(ga.cookie.config.__utma);
    if (c) {
      return c[3];
    } else {
      return null;
    }
  };
  ga.getCurrentVisitTime = function() {
    var c;
    c = ga.cookie.get(ga.cookie.config.__utma);
    if (c) {
      return c[4];
    } else {
      return null;
    }
  };
  ga.getCountOfVisits = function() {
    var c;
    c = ga.cookie.get(ga.cookie.config.__utma);
    if (c) {
      return c[5];
    } else {
      return null;
    }
  };
  ga.getCountOfPageview = function() {
    var c;
    c = ga.cookie.get(ga.cookie.config.__utmb);
    if (c) {
      if (c[1]) {
        return c[1];
      } else {
        return 1;
      }
    }
    return null;
  };
  ga.getMedia = function() {
    var c;
    c = ga.cookie.get(ga.cookie.config.__utmz);
    if (c && c[4]) {
      return c[4]['utmcmd'];
    } else {
      return null;
    }
  };
  ga.getSource = function() {
    var c;
    c = ga.cookie.get(ga.cookie.config.__utmz);
    if (c && c[4]) {
      return c[4]['utmcsr'];
    } else {
      return null;
    }
  };
  ga.getCampaign = function() {
    var c;
    c = ga.cookie.get(ga.cookie.config.__utmz);
    if (c && c[4]) {
      return c[4]['utmccn'];
    } else {
      return null;
    }
  };
  __getArgumentsAndOptions = function(requireNum, args) {
    var a, i, o, options, _i, _len;
    a = [];
    options = null;
    for (i = _i = 0, _len = args.length; _i < _len; i = ++_i) {
      o = args[i];
      if (i < requireNum) {
        a.push(o);
        continue;
      }
      switch (typeof o) {
        case 'string':
        case 'boolean':
        case 'number':
          a.push(o);
          break;
        case 'object':
          options = o;
          break;
        default:
          break;
      }
    }
    return {
      "arguments": a,
      options: options
    };
  };
  if ($.ga) {
    _ga = $.ga;
  }
  $.ga = $['google-analytics'] = ga;
  return $(function() {
    ga._pageLoadTime = new Date().getTime();
    if (!ga.isScriptLoaded()) {
      ga.load();
    }
    $.fn.trackEvent = function(category, action, label, options) {
      var method;
      method = options && options.event ? options.event.toLowerCase() : 'click';
      return this.each(function() {
        var f;
        $(this).bind(method, f = function(e) {
          var metaNewWin, _act, _cat, _lbl, _link;
          _cat = $.isFunction(category) ? category.call(null, this).toString() : category;
          _act = $.isFunction(action) ? action.call(null, this).toString() : action;
          _lbl = $.isFunction(label) ? label.call(null, this).toString() : label;
          ga.trackEvent(_cat, _act, _lbl, options);
          metaNewWin = method === 'click' && (e.metaKey || e.ctrlKey);
          if (!metaNewWin && options && options.delay > 0 && $(this).attr('_target') !== '_blank') {
            _link = this;
            setTimeout(function() {
              $(_link).unbind(method, f);
              return _link[method]();
            }, options.delay);
            return false;
          }
        });
      });
    };
    $.fn.trackPageview = function(uri, options) {
      var method;
      method = options && options.event ? options.event.toLowerCase() : 'click';
      return this.each(function() {
        var f;
        $(this).bind(method, f = function(e) {
          var usrNewWin, _link, _uri;
          _uri = $.isFunction(uri) ? uri.call(null, this) : uri;
          ga.trackPageview(_uri, options);
          usrNewWin = method === 'click' && (e.metaKey || e.ctrlKey);
          if (!usrNewWin && options && options.delay > 0 && $(this).attr('_target') !== '_blank') {
            _link = this;
            setTimeout(function() {
              $(_link).unbind(method, f);
              return _link[method]();
            }, options.delay);
            return false;
          }
        });
      });
    };
    $.fn.link = function(options) {
      var method;
      method = options && options.event ? options.event : 'click';
      return this.each(function() {
        var f;
        return $(this).bind(method, f = function() {
          ga.link(this, options);
        });
      });
    };
    return $.fn.linkByPost = function(options) {
      var method;
      method = options && options.event ? options.event : 'submit';
      return this.each(function() {
        var f;
        return $(this).bind(method, f = function() {
          ga.linkByPost(this, options);
        });
      });
    };
  });
})(jQuery);
